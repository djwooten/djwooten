<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Software | David Wooten</title>
    <link>https://djwooten.github.io/software/</link>
      <atom:link href="https://djwooten.github.io/software/index.xml" rel="self" type="application/rss+xml" />
    <description>Software</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>Â© 2018 - 2020 David Wooten</copyright><lastBuildDate>Thu, 23 Apr 2020 12:00:07 -0400</lastBuildDate>
    <image>
      <url>https://djwooten.github.io/images/logo_hufcc7f18ea081c5a5c1d6a1ea8035b9ba_249_300x300_fit_lanczos_2.png</url>
      <title>Software</title>
      <link>https://djwooten.github.io/software/</link>
    </image>
    
    <item>
      <title>synergy - Python Package</title>
      <link>https://djwooten.github.io/software/synergy/</link>
      <pubDate>Thu, 23 Apr 2020 12:00:07 -0400</pubDate>
      <guid>https://djwooten.github.io/software/synergy/</guid>
      <description>&lt;h1 id=&#34;synergy&#34;&gt;synergy&lt;/h1&gt;
&lt;p&gt;A python package to calculate, analyze, and visualize drug combination synergy and antagonism. Currently supports multiple models of synergy, including MuSyC, Bliss, Loewe, Combination Index, ZIP, Zimmer, BRAID, Schindler, and HSA.&lt;/p&gt;
&lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;
&lt;p&gt;Using PIP
&lt;code&gt;pip install synergy&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Using conda
&lt;code&gt;not yet&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Using git
&lt;code&gt;git clone ...&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;example-usage&#34;&gt;Example Usage&lt;/h2&gt;
&lt;h3 id=&#34;generate-synthetic-data-to-fit&#34;&gt;Generate synthetic data to fit&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from synergy.combination import MuSyC
from synergy.utils.dose_tools import grid
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Initialize a model. I will use the &lt;code&gt;MuSyC&lt;/code&gt; synergy model to generate data, but it could be done using &lt;code&gt;Zimmer&lt;/code&gt; or &lt;code&gt;BRAID&lt;/code&gt; as well.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;E0, E1, E2, E3 = 1, 0.7, 0.4, 0.
h1, h2 = 2.3, 0.8
C1, C2 = 1e-2, 1e-1
oalpha12, oalpha21 = 3.2, 1.1
gamma12, gamma21 = 2.5, 0.8

truemodel = MuSyC(E0=E0, E1=E1, E2=E2, E3=E3, h1=h1, h2=h2, C1=C1, C2=C2,	\
                  oalpha12=oalpha12, oalpha21=oalpha21, gamma12=gamma12, 	\
                  gamma21=gamma21)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Display the model&amp;rsquo;s parameters&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(truemodel)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;MuSyC(E0=1.00, E1=0.70, E2=0.40, E3=0.00, h1=2.30, h2=0.80, C1=1.00e-02, C2=1.00e-01, oalpha12=3.20, oalpha21=1.10, beta=0.67, gamma12=2.50, gamma21=0.80)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Evaluate the model at doses d1=C1, d2=C2 (a combination of the EC50 of each drug)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(truemodel.E(C1, C2))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;0.3665489890285983
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Generate a dose sampling grid to make &amp;ldquo;measurements&amp;rdquo; at. Drug 1 will be sampled at 8 doses, logarithmically spaced from C1/100 to C1*100. Drug 2 will be likewise sampled around C2. (8 doses of Drug 1) X (8 doses of Drug 2) = 64 total measurements.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;d1, d2 = grid(C1/1e2, C1*1e2, C2/1e2, C2*1e2, 8, 8)
print(d1.shape, d2.shape)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;(64,) (64,)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Evaluate the model at those 64 dose combinations&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;E = truemodel.E(d1, d2)
print(E.shape)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;(64,)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Add noise to get imperfect data&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import numpy as np

E_noisy = E * (1+0.1*(2*np.random.rand(len(E))-1))
print(E_noisy.shape)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;(64,)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;fit-synergy-model-to-data&#34;&gt;Fit synergy model to data&lt;/h3&gt;
&lt;p&gt;Create a new synergy model to fit using the synthetic data. Here I use &lt;code&gt;MuSyC&lt;/code&gt;, which is the same model we used to generate the synthetic data. &lt;code&gt;bootstrap_iterations&lt;/code&gt; are used to get confidence intervals.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;model = MuSyC()
model.fit(d1, d2, E_noisy, bootstrap_iterations=100)
print(model)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;MuSyC(E0=0.93, E1=0.68, E2=0.42, E3=0.00, h1=1.86, h2=1.12, C1=9.64e-03, C2=1.24e-01, oalpha12=3.75, oalpha21=1.08, beta=0.81, gamma12=2.01, gamma21=0.98)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This prints the lower and upper bound confidence intervals (defaults to 95%) for each parameter.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(model.get_parameter_range().T)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[[ 0.91223345  0.96329156]
 [ 0.64643766  0.70749396]
 [ 0.39022822  0.44990642]
 [-0.02507603  0.02363363]
 [ 1.26005438  2.73713318]
 [ 0.93018994  1.43865508]
 [ 0.00760803  0.01384544]
 [ 0.10018859  0.15263104]
 [ 2.85988609  4.6230902 ]
 [ 0.73239517  1.79969918]
 [ 0.69827786  0.95770258]
 [ 1.44083572  2.76863031]
 [ 0.56548907  1.83905139]]
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;visualize&#34;&gt;Visualize&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from matplotlib import pyplot as plt
from synergy.utils import plots

fig = plt.figure(figsize=(12,6))

ax = fig.add_subplot(131)
truemodel.plot_colormap(d1, d2, xlabel=&amp;quot;Drug1&amp;quot;, ylabel=&amp;quot;Drug2&amp;quot;, title=&amp;quot;True model&amp;quot;, ax=ax, vmin=0, vmax=1)

ax = fig.add_subplot(132)
plots.plot_colormap(d1, d2, E_noisy, ax=ax, title=&amp;quot;Noisy Data&amp;quot;, cmap=&amp;quot;viridis&amp;quot;, xlabel=&amp;quot;Drug1&amp;quot;, ylabel=&amp;quot;Drug2&amp;quot;, vmin=0, vmax=1)

ax = fig.add_subplot(133)
model.plot_colormap(d1, d2, xlabel=&amp;quot;Drug1&amp;quot;, ylabel=&amp;quot;Drug2&amp;quot;, title=&amp;quot;Fit model&amp;quot;, ax=ax, vmin=0, vmax=1)

plt.tight_layout()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;output_9_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>
